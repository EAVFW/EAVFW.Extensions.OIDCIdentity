<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net8.0</TargetFrameworks>
    <CompilerGeneratedFilesOutputPath>Generated</CompilerGeneratedFilesOutputPath>
	  <CustomizationPrefix>MC</CustomizationPrefix>
	  <RemoteEAVFramework>$(UseEAVFromNuget)</RemoteEAVFramework>
	  <EAVFrameworkSourceGenerator>True</EAVFrameworkSourceGenerator>
	  <RootNamespace>MC.Models</RootNamespace>
	  <ManifestPath Condition="$(ManifestPath) == ''">manifest.json</ManifestPath>
<IsPackable>false</IsPackable>
  </PropertyGroup>

	<ItemGroup Condition="$(RemoteEAVFramework) == 'false'">
		<ProjectReference OutputItemType="Analyzer" ReferenceOutputAssembly="false" Include="$(LocalEAVFrameworkPath)\generators\EAVFramework.SourceGenerator\EAVFramework.SourceGenerator.csproj" />
		<ProjectReference Include="..\..\..\..\dev\eavfw\EAVFW.Extensions.Documents\src\EAVFW.Extensions.Documents\EAVFW.Extensions.Documents.csproj" />
		<ProjectReference Include="..\..\..\EAVFW.Extensions.SecurityModel\src\EAVFW.Extensions.SecurityModel\EAVFW.Extensions.SecurityModel.csproj" />
		<ProjectReference Include="$(LocalEAVFrameworkPath)\src\EAVFramework.csproj" />
	</ItemGroup>
	<ItemGroup Condition="$(RemoteEAVFramework) != 'false'">
		<PackageReference Include="EAVFramework" Version="$(EAVFrameworkVersion)" />
		<PackageReference Include="EAVFW.Extensions.Documents" Version="*" />
		<PackageReference Include="EAVFW.Extensions.SecurityModel" Version="*" />
		<PackageReference OutputItemType="Analyzer" ReferenceOutputAssembly="false" Include="EAVFramework.SourceGenerator" Version="$(EAVFrameworkVersion)" />
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="6.0.29">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
		
		<AdditionalFiles Include="obj/manifest.g.json" Condition="Exists('obj/manifest.g.json')"></AdditionalFiles>
	</ItemGroup>
	
	<ItemGroup>
		<CompilerVisibleProperty Include="CustomizationPrefix" />
		<CompilerVisibleProperty Include="RootNamespace" />
		<CompilerVisibleProperty Include="EAVFrameworkSourceGenerator" />
	</ItemGroup>

	<Target Name="GenerateManifest">
		<Message Importance="high" Text="Generating Manifest" />
		<Exec WorkingDirectory="$(MSBuildProjectDirectory)" Command="dotnet tool run eavfw-manifest --customizationprefix $(CustomizationPrefix) --path &quot;$(MSBuildProjectDirectory)/$(ManifestPath)&quot;" />
	</Target>
	<Target Name="GenerateIfMissing" BeforeTargets="BeforeBuild" Condition="!Exists('$(MSBuildProjectDirectory)\obj\manifest.g.json')">
		<Message Importance="high" Text="manifest.g.json does not exists" />
		<CallTarget Targets="GenerateManifest" />
		<Message Importance="high" Text="A new build is needed" />
		<Error Text="Please build again, since the initial manifest.g.json has now been generated" />
	</Target>
	<Target Name="BuildIfChanged" Outputs="$(MSBuildProjectDirectory)\obj\manifest.g.json" BeforeTargets="BeforeBuild" Inputs="$(MSBuildProjectDirectory)\manifest.json;$(MSBuildProjectDirectory)\manifest.apps.json;$(MSBuildProjectDirectory)\manifest.cms.json;$(MSBuildProjectDirectory)\manifest.crm.json" Condition="Exists('$(MSBuildProjectDirectory)\manifest.json')">
		<CallTarget Targets="GenerateManifest" />
	</Target>
	<Target Name="GenerateManifestOnRebuild" BeforeTargets="Rebuild">
		<CallTarget Targets="GenerateManifest" />
	</Target>







	<!--Create the generated Files such its easier to work with-->
	<ItemGroup Condition="$(EmitCompilerGeneratedFiles) == 'true'">
		<Folder Include="Generated" />
	</ItemGroup>
	<ItemGroup>
	  
	  <ProjectReference Include="..\..\src\EAVFW.Extensions.OIDCIdentity\EAVFW.Extensions.OIDCIdentity.csproj" />
	</ItemGroup>
	<Target Name="AddSourceGeneratedFiles" AfterTargets="CoreCompile" Condition="$(EmitCompilerGeneratedFiles) == 'true'">
		<ItemGroup>
			<Compile Include="Generated\**" />
		</ItemGroup>
	</Target>
	<Target Name="RemoveSourceGeneratedFiles" BeforeTargets="CoreCompile" Condition="$(EmitCompilerGeneratedFiles) == 'true'">
		<ItemGroup>
			<Compile Remove="Generated\**" />
		</ItemGroup>
	</Target>
	<Target Name="CleanSourceGeneratedFiles" AfterTargets="Clean" Condition="$(EmitCompilerGeneratedFiles) == 'true'">
		<RemoveDir Directories="Generated" />
	</Target>
</Project>
